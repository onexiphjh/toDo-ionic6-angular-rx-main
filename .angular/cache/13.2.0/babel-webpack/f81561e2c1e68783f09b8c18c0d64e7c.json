{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar SQLiteObject =\n/** @class */\nfunction () {\n  function SQLiteObject(_objectInstance) {\n    this._objectInstance = _objectInstance;\n  }\n\n  SQLiteObject.prototype.addTransaction = function (transaction) {\n    return cordovaInstance(this, \"addTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  SQLiteObject.prototype.transaction = function (fn) {\n    return cordovaInstance(this, \"transaction\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 1\n    }, arguments);\n  };\n\n  SQLiteObject.prototype.readTransaction = function (fn) {\n    return cordovaInstance(this, \"readTransaction\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.startNextTransaction = function () {\n    return cordovaInstance(this, \"startNextTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  SQLiteObject.prototype.open = function () {\n    return cordovaInstance(this, \"open\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.executeSql = function (statement, params) {\n    return cordovaInstance(this, \"executeSql\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.sqlBatch = function (sqlStatements) {\n    return cordovaInstance(this, \"sqlBatch\", {}, arguments);\n  };\n\n  SQLiteObject.prototype.abortallPendingTransactions = function () {\n    return cordovaInstance(this, \"abortallPendingTransactions\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n    get: function () {\n      return instancePropertyGet(this, \"databaseFeatures\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"databaseFeatures\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n    get: function () {\n      return instancePropertyGet(this, \"openDBs\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"openDBs\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SQLiteObject;\n}();\n\nexport { SQLiteObject };\n\nvar SQLite =\n/** @class */\nfunction (_super) {\n  __extends(SQLite, _super);\n\n  function SQLite() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SQLite.prototype.create = function (config) {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return new Promise(function (resolve, reject) {\n          sqlitePlugin.openDatabase(config, function (db) {\n            return resolve(new SQLiteObject(db));\n          }, reject);\n        });\n      }\n    }();\n  };\n\n  SQLite.prototype.echoTest = function () {\n    return cordova(this, \"echoTest\", {}, arguments);\n  };\n\n  SQLite.prototype.selfTest = function () {\n    return cordova(this, \"selfTest\", {}, arguments);\n  };\n\n  SQLite.prototype.deleteDatabase = function (config) {\n    return cordova(this, \"deleteDatabase\", {}, arguments);\n  };\n\n  SQLite.pluginName = \"SQLite\";\n  SQLite.pluginRef = \"sqlitePlugin\";\n  SQLite.plugin = \"cordova-sqlite-storage\";\n  SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n  SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\n\n  SQLite.ɵfac = /*@__PURE__*/function () {\n    var ɵSQLite_BaseFactory;\n    return function SQLite_Factory(t) {\n      return (ɵSQLite_BaseFactory || (ɵSQLite_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SQLite)))(t || SQLite);\n    };\n  }();\n\n  SQLite.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: SQLite,\n    factory: function (t) {\n      return SQLite.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return SQLite;\n}(IonicNativePlugin);\n\nexport { SQLite }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}