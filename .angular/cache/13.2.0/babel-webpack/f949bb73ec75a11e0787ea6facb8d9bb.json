{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@ionic-native/sqlite/ngx\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@ionic-native/sqlite-porter/ngx\";\nexport let DbService = /*#__PURE__*/(() => {\n  class DbService {\n    constructor(platform, sqlite, httpClient, sqlPorter) {\n      this.platform = platform;\n      this.sqlite = sqlite;\n      this.httpClient = httpClient;\n      this.sqlPorter = sqlPorter;\n      this.songsList = new BehaviorSubject([]);\n      this.isDbReady = new BehaviorSubject(false);\n      this.platform.ready().then(() => {\n        this.sqlite.create({\n          name: 'positronx_db.db',\n          location: 'default'\n        }).then(db => {\n          this.storage = db;\n          this.getFakeData();\n        });\n      });\n    }\n\n    dbState() {\n      return this.isDbReady.asObservable();\n    }\n\n    fetchSongs() {\n      return this.songsList.asObservable();\n    } // Render fake data\n\n\n    getFakeData() {\n      this.httpClient.get('assets/dump.sql', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.sqlPorter.importSqlToDb(this.storage, data).then(_ => {\n          this.getSongs();\n          this.isDbReady.next(true);\n        }).catch(error => console.error(error));\n      });\n    } // Get list\n\n\n    getSongs() {\n      return this.storage.executeSql('SELECT * FROM songtable', []).then(res => {\n        let items = [];\n\n        if (res.rows.length > 0) {\n          for (var i = 0; i < res.rows.length; i++) {\n            items.push({\n              id: res.rows.item(i).id,\n              artist_name: res.rows.item(i).artist_name,\n              song_name: res.rows.item(i).song_name\n            });\n          }\n        }\n\n        this.songsList.next(items);\n      });\n    } // Add\n\n\n    addSong(artist_name, song_name) {\n      let data = [artist_name, song_name];\n      return this.storage.executeSql('INSERT INTO songtable (artist_name, song_name) VALUES (?, ?)', data).then(res => {\n        this.getSongs();\n      });\n    } // Get single object\n\n\n    getSong(id) {\n      return this.storage.executeSql('SELECT * FROM songtable WHERE id = ?', [id]).then(res => {\n        return {\n          id: res.rows.item(0).id,\n          artist_name: res.rows.item(0).artist_name,\n          song_name: res.rows.item(0).song_name\n        };\n      });\n    } // Update\n\n\n    updateSong(id, song) {\n      let data = [song.artist_name, song.song_name];\n      return this.storage.executeSql(`UPDATE songtable SET artist_name = ?, song_name = ? WHERE id = ${id}`, data).then(data => {\n        this.getSongs();\n      });\n    } // Delete\n\n\n    deleteSong(id) {\n      return this.storage.executeSql('DELETE FROM songtable WHERE id = ?', [id]).then(_ => {\n        this.getSongs();\n      });\n    }\n\n  }\n\n  DbService.ɵfac = function DbService_Factory(t) {\n    return new (t || DbService)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.SQLite), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.SQLitePorter));\n  };\n\n  DbService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DbService,\n    factory: DbService.ɵfac,\n    providedIn: 'root'\n  });\n  return DbService;\n})();","map":null,"metadata":{},"sourceType":"module"}